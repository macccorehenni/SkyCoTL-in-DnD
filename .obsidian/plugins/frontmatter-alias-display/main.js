/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => FrontmatterAliasDisplay
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var FrontmatterAliasDisplay = class extends import_obsidian.Plugin {
  displayAliases() {
    var _a, _b, _c, _d;
    const fileExplorer = app.workspace.getLeavesOfType("file-explorer")[0];
    let files = fileExplorer.view.fileItems;
    for (const file of Object.values(files)) {
      if (file.file) {
        const aliasDiv = file.selfEl.querySelector(".file-alias");
        if (aliasDiv) {
          aliasDiv.remove();
        }
        let aliases = (_b = (_a = app.metadataCache.getFileCache(file.file)) == null ? void 0 : _a.frontmatter) == null ? void 0 : _b.aliases;
        let alias = (_d = (_c = app.metadataCache.getFileCache(file.file)) == null ? void 0 : _c.frontmatter) == null ? void 0 : _d.alias;
        let aliasContent = alias ? alias : aliases;
        file.selfEl.createEl("div", { text: aliasContent, cls: "file-alias nav-file-title-content" });
      }
    }
  }
  async onload() {
    app.workspace.onLayoutReady(this.displayAliases);
    app.workspace.on("layout-change", this.displayAliases);
    app.workspace.on("editor-change", this.displayAliases);
  }
  onunload() {
    const fileExplorer = app.workspace.getLeavesOfType("file-explorer")[0];
    let files = fileExplorer.view.fileItems;
    for (const file of Object.values(files)) {
      if (file.file) {
        const aliasDiv = file.selfEl.querySelector(".file-alias");
        if (aliasDiv) {
          aliasDiv.remove();
        }
      }
    }
  }
};


/* nosourcemap */